; KISS bootloader
; looks for a boot sector in every connected floppy and loads it in memory at location 0.
; Prompts for boot choice if there is a possible choice
; Sets A to the floppy the bootsector was loaded from.
; Sets B to an array of device structs containing all of the devices detected
;
; ==================
; Boot sector description
;
; u16[3] reserved
; u16[10] name in boot menu (not compressed, stops at first 0 found or 10)
; u16[498] boot sector specific data
; u16 magic word (0x55AA)
;
; ==================
; Array
;
; u16 array_size
; Device_struct* array
;
; ==================
; Device_struct
;
; u16 ID
; u16 hardware ID A
; u16 hardware ID B
; u16 hardware version
; u16 manufacturer ID A
; u16 manufacturer ID B
;
; =================

#define SECTOR_LOCATION 0xD000
#define FLOPPY_STATE_BUSY 3

#define STANDARD_SCREEN 0x7000
#define STANDARD_MEDIA 0x4000
#define STANDARD_KEYBOARD 0x3000

#define COPY_LOCATION 0xF000
#define DEVICES_LOCATION 0xE000

#define SCREEN_LOCATION 0x8000
#define COLOR 0x2000

#define KEY_ENTER 0x11
#define KEY_UP 0x80
#define KEY_DOWN 0x81

jsr detect_peripherals

ife [screen], 0
    set PC, error
ife [n_media], 0
    set PC, error

set A, 0
set B, SCREEN_LOCATION
hwi [screen] ;Mapping screen

set I, KISS_welcome
set X, 3
set Y, 0
jsr print

set Y, 2
jsr find_bootsector

ife Z, 0xFFFF
    set PC, error_print

set B, DEVICES_LOCATION
set A, Z
set I, copy
set J, COPY_LOCATION
set C, copy_end + 1 - copy
jsr memcpy
set I, memcpy
set J, COPY_LOCATION + copy_end - copy
set C, memcpy_end + 1 - memcpy 
jsr memcpy
set PUSH, 0
set PC, COPY_LOCATION

:error_print
set I, error_msg
jsr print
:error
log [keyboard]
log [screen]
log [n_media]
log [media]
sub PC, 1

:copy
set I, SECTOR_LOCATION + 13
set J, 0
set C, 512
set PUSH, PC
:copy_end

:find_bootsector
set I, 0
set Z, 0xFFFF
ife I, [n_media]
    set PC, POP
:find_bootsector_loop
    set A, 2
    set X, 0
    set PUSH, Y
    set Y, SECTOR_LOCATION
    hwi [I + media]
    set Y, POP
    jsr wait
    ife [SECTOR_LOCATION + 511], 0x55AA
        jsr sector_found
    add I, 1
    ifn I, [n_media]
        set PC, find_bootsector_loop
jsr select_boot
set PC, POP
:sector_found
set A, bootsectors
:sector_found_loop
    ife [A], 0
        set PC, sector_found_found
    add A, 1
    set PC, sector_found_loop
:sector_found_found
set X, A
set [A], [I + media]
set PUSH, I
set I, SECTOR_LOCATION + 3
set PUSH, X
set X, 2
jsr print
set X, POP
set I, POP
add Y, 1
set PC, POP
:wait
set A, 0
hwi [I + media]
ife B, FLOPPY_STATE_BUSY
    set PC, wait
set PC, POP

:select_boot
ifn [bootsectors], 0
    set Z, [bootsectors]
ife [keyboard], 0
    set PC, POP
set A, X
sub A, bootsectors - 1
ife A, 1
    set PC, POP
add A, 1
set X, 0
set Y, 2
:select_boot_loop
    set I, KISS_selector
    jsr print
    jsr get_key
    set I, KISS_no_selector
    jsr print
    ife C, KEY_ENTER
        set PC, POP
    ife C, KEY_UP
        sub Y, 1
    ife C, KEY_DOWN
        add Y, 1
    ifl Y, 2
        set Y, 2
    ifg Y, A
        set Y, A
    set Z, Y
    sub Z, 2
    set PC, select_boot_loop

:get_key
set PUSH, A
set A, 1
:get_key_loop
    hwi [keyboard]
    ife C, 0
        set PC, get_key_loop
set A, POP
set PC, POP

:add_device
set PUSH, A
set A, [DEVICES_LOCATION]
mul A, 6
add A, 1
add A, DEVICES_LOCATION
set [A], J
set [A + 1], B
set [A + 2], POP
set [A + 3], C
set [A + 4], Y
set [A + 5], X
add [DEVICES_LOCATION], 1
and B, 0xF000
ife B, STANDARD_SCREEN
    set [screen], J
ife B, STANDARD_MEDIA
    set PC, add_media
ife B, STANDARD_KEYBOARD
    set [keyboard], J
set PC, POP

:add_media
ife [n_media], 10
    set PC, POP
set A, [n_media]
set [A + media], J
add [n_media], 1
set PC, POP

:detect_peripherals
hwn I
set J, 0
:detect_peripherals_loop
    hwq J
    jsr add_device
    add J, 1
    ifn J, I
        set PC, detect_peripherals_loop
set PC, POP

; I -> from
; J -> to
; C -> size
:memcpy
ife C, 0
    set PC, POP
sti [J], [I]
sub C, 1
sub PC, 5
:memcpy_end

:keyboard .dat 0
:screen .dat 0
:n_media .dat 0
:media .dat 0 0 0 0 0 0 0 0 0 0
:bootsectors .dat 0 0 0 0 0 0 0 0 0 0

; I -> char*
; X, Y -> position
:print
set PUSH, J
set PUSH, A
set PUSH, Y
set J, SCREEN_LOCATION
mul Y, 32
add Y, X
add J, Y
:print_loop
set A, [I]
bor A, COLOR
sti [J], A
ifn [I], 0
    set PC, print_loop
set Y, POP
set A, POP
set J, POP
set PC, POP

:KISS_welcome .dat "==== KISS bootloader ===="
:error_msg .dat "No boot sector found, aborting..."
:KISS_selector .dat ">"
:KISS_no_selector .dat " "
